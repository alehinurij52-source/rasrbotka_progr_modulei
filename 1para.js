// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å
class Character {
    constructor(race, height, weight, strength, health, age) {
        this.race = race;
        this.height = height;
        this.weight = weight;
        this.strength = strength;
        this.health = health;
        this.maxHealth = health;
        this.age = age;
        this.armor = {
            chest: null,
            helmet: null,
            leggings: null,
            pants: null
        };
        this.weapon = null;
        this.isAlive = true;
    }

    // –ù–∞–¥–µ—Ç—å –±—Ä–æ–Ω—é
    equipArmor(armorType, armor) {
        if (this.armor.hasOwnProperty(armorType)) {
            this.armor[armorType] = armor;
            console.log(`${this.race} –Ω–∞–¥–µ–ª ${armorType}: ${armor.name}`);
        } else {
            console.log(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –±—Ä–æ–Ω–∏: ${armorType}`);
        }
    }

    // –í–∑—è—Ç—å –æ—Ä—É–∂–∏–µ
    equipWeapon(weapon) {
        this.weapon = weapon;
        console.log(`${this.race} –≤–∑—è–ª –≤ —Ä—É–∫–∏: ${weapon.name}`);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∑–∞—â–∏—Ç—É –æ—Ç –≤—Å–µ–π –±—Ä–æ–Ω–∏
    getTotalArmor() {
        let total = 0;
        for (const type in this.armor) {
            if (this.armor[type]) {
                total += this.armor[type].defense;
            }
        }
        return total;
    }

    // –ê—Ç–∞–∫–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    attack(target) {
        if (!this.isAlive || !target.isAlive) return;

        const baseDamage = this.strength + (this.weapon ? this.weapon.damage : 5);
        const targetArmor = target.getTotalArmor();
        const actualDamage = Math.max(1, baseDamage - targetArmor);
        
        target.health -= actualDamage;
        
        console.log(`${this.race} –∞—Ç–∞–∫—É–µ—Ç ${target.race} —Å —Å–∏–ª–æ–π ${actualDamage} —É—Ä–æ–Ω–∞!`);
        console.log(`${target.race} –ø–æ–ª—É—á–∞–µ—Ç ${actualDamage} —É—Ä–æ–Ω–∞. –ó–¥–æ—Ä–æ–≤—å–µ: ${target.health}/${target.maxHealth}`);
        
        if (target.health <= 0) {
            target.health = 0;
            target.isAlive = false;
            console.log(`‚ö∞Ô∏è ${target.race} –ø–æ–≥–∏–±!`);
        }
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—è
    restoreHealth() {
        this.health = this.maxHealth;
        this.isAlive = true;
    }

    getStatus() {
        return `${this.race} [${this.health}/${this.maxHealth} HP]`;
    }
}

// –ö–ª–∞—Å—Å—ã —Ä–∞—Å
class Orc extends Character {
    constructor() {
        super("–û—Ä–∫", 210, 120, 18, 100, 35);
    }
}

class Dwarf extends Character {
    constructor() {
        super("–ì–Ω–æ–º", 140, 80, 16, 90, 150);
    }
}

class Human extends Character {
    constructor() {
        super("–ß–µ–ª–æ–≤–µ–∫", 180, 85, 15, 85, 30);
    }
}

class Elf extends Character {
    constructor() {
        super("–≠–ª—å—Ñ", 190, 75, 14, 80, 200);
    }
}

// –ö–ª–∞—Å—Å—ã –±—Ä–æ–Ω–∏
class Armor {
    constructor(name, defense, type) {
        this.name = name;
        this.defense = defense;
        this.type = type;
    }
}

// –ö–ª–∞—Å—Å—ã –æ—Ä—É–∂–∏—è
class Weapon {
    constructor(name, damage, type) {
        this.name = name;
        this.damage = damage;
        this.type = type;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±—Ä–æ–Ω–∏
const plateArmor = new Armor("–õ–∞—Ç–Ω—ã–π –¥–æ—Å–ø–µ—Ö", 15, "chest");
const chainArmor = new Armor("–ö–æ–ª—å—á—É–≥–∞", 10, "chest");
const steelHelmet = new Armor("–°—Ç–∞–ª—å–Ω–æ–π —à–ª–µ–º", 8, "helmet");
const ironLeggings = new Armor("–ñ–µ–ª–µ–∑–Ω—ã–µ –ø–æ–Ω–æ–∂–∏", 12, "leggings");
const leatherPants = new Armor("–ö–æ–∂–∞–Ω—ã–µ —à—Ç–∞–Ω—ã", 5, "pants");

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –æ—Ä—É–∂–∏—è
const sword = new Weapon("–ú–µ—á", 12, "sword");
const halberd = new Weapon("–ê–ª–µ–±–∞—Ä–¥–∞", 15, "halberd");
const axe = new Weapon("–¢–æ–ø–æ—Ä", 14, "axe");
const bow = new Weapon("–õ—É–∫", 11, "bow");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—è –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
function fight(character1, character2) {
    console.log(`\n‚öîÔ∏è  –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ë–û–ô: ${character1.race} vs ${character2.race}`);
    console.log("=".repeat(50));
    
    let round = 1;
    
    while (character1.isAlive && character2.isAlive && round <= 20) {
        console.log(`\n--- –†–∞—É–Ω–¥ ${round} ---`);
        
        // –ü–µ—Ä–≤—ã–π –∞—Ç–∞–∫—É–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ
        character1.attack(character2);
        if (!character2.isAlive) break;
        
        // –í—Ç–æ—Ä–æ–π –∞—Ç–∞–∫—É–µ—Ç –ø–µ—Ä–≤–æ–≥–æ
        character2.attack(character1);
        if (!character1.isAlive) break;
        
        round++;
    }
    
    if (character1.isAlive && character2.isAlive) {
        console.log("\n–ë–æ–π –æ–∫–æ–Ω—á–∏–ª—Å—è –Ω–∏—á—å–µ–π!");
    } else if (character1.isAlive) {
        console.log(`\nüéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: ${character1.race}`);
    } else {
        console.log(`\nüéâ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: ${character2.race}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ (–∫–∞–∂–¥—ã–π —Å –∫–∞–∂–¥—ã–º)
function tournament(characters) {
    console.log("üèÜ –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –¢–£–†–ù–ò–†!");
    console.log("=".repeat(50));
    
    const results = {};
    characters.forEach(char => results[char.race] = 0);
    
    for (let i = 0; i < characters.length; i++) {
        for (let j = i + 1; j < characters.length; j++) {
            const char1 = characters[i];
            const char2 = characters[j];
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –±–æ–µ–º
            char1.restoreHealth();
            char2.restoreHealth();
            
            fight(char1, char2);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (char1.isAlive) results[char1.race]++;
            if (char2.isAlive) results[char2.race]++;
        }
    }
    
    console.log("\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–£–†–ù–ò–†–ê:");
    console.log("=".repeat(30));
    for (const [race, wins] of Object.entries(results)) {
        console.log(`${race}: ${wins} –ø–æ–±–µ–¥`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ—è
function sequentialBattle(characters) {
    console.log("\n‚öîÔ∏è  –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –ë–û–ô:");
    console.log("=".repeat(50));
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ–º
    characters.forEach(char => char.restoreHealth());
    
    let currentFighter = characters[0];
    
    for (let i = 1; i < characters.length; i++) {
        if (!currentFighter.isAlive) {
            console.log("–ë–æ–π –æ–∫–æ–Ω—á–µ–Ω - –Ω–µ—Ç –∂–∏–≤—ã—Ö –±–æ–π—Ü–æ–≤!");
            break;
        }
        
        const nextFighter = characters[i];
        nextFighter.restoreHealth(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–ª–µ–¥—É—é—â–µ–º—É –±–æ–π—Ü—É
        
        console.log(`\n‚öîÔ∏è  –°–ª–µ–¥—É—é—â–∏–π –±–æ–π: ${currentFighter.race} vs ${nextFighter.race}`);
        fight(currentFighter, nextFighter);
        
        // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –±–æ–π
        if (currentFighter.isAlive) {
            console.log(`${currentFighter.race} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –±–æ–π!`);
        } else if (nextFighter.isAlive) {
            currentFighter = nextFighter;
            console.log(`${nextFighter.race} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤—ã–º —á–µ–º–ø–∏–æ–Ω–æ–º!`);
        }
    }
    
    if (currentFighter.isAlive) {
        console.log(`\nüëë –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–ë–ï–î–ò–¢–ï–õ–¨: ${currentFighter.race}`);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
const orc = new Orc();
const dwarf = new Dwarf();
const human = new Human();
const elf = new Elf();

// –≠–∫–∏–ø–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
orc.equipArmor("chest", plateArmor);
orc.equipArmor("helmet", steelHelmet);
orc.equipWeapon(axe);

dwarf.equipArmor("chest", chainArmor);
dwarf.equipArmor("leggings", ironLeggings);
dwarf.equipWeapon(halberd);

human.equipArmor("chest", chainArmor);
human.equipArmor("pants", leatherPants);
human.equipWeapon(sword);

elf.equipArmor("pants", leatherPants);
elf.equipWeapon(bow);

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–Ω–∏—Ä (–∫–∞–∂–¥—ã–π —Å –∫–∞–∂–¥—ã–º)
const allCharacters = [orc, dwarf, human, elf];
tournament(allCharacters);

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ–π
sequentialBattle(allCharacters);
